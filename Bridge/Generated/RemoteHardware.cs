// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: meshtastic/remote_hardware.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021, 8981
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Meshtastic.Protobufs {

  /// <summary>Holder for reflection information generated from meshtastic/remote_hardware.proto</summary>
  public static partial class RemoteHardwareReflection {

    #region Descriptor
    /// <summary>File descriptor for meshtastic/remote_hardware.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static RemoteHardwareReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CiBtZXNodGFzdGljL3JlbW90ZV9oYXJkd2FyZS5wcm90bxIKbWVzaHRhc3Rp",
            "YyLWAQoPSGFyZHdhcmVNZXNzYWdlEi4KBHR5cGUYASABKA4yIC5tZXNodGFz",
            "dGljLkhhcmR3YXJlTWVzc2FnZS5UeXBlEhEKCWdwaW9fbWFzaxgCIAEoBBIS",
            "CgpncGlvX3ZhbHVlGAMgASgEImwKBFR5cGUSCQoFVU5TRVQQABIPCgtXUklU",
            "RV9HUElPUxABEg8KC1dBVENIX0dQSU9TEAISEQoNR1BJT1NfQ0hBTkdFRBAD",
            "Eg4KClJFQURfR1BJT1MQBBIUChBSRUFEX0dQSU9TX1JFUExZEAVCYwoTY29t",
            "LmdlZWtzdmlsbGUubWVzaEIOUmVtb3RlSGFyZHdhcmVaImdpdGh1Yi5jb20v",
            "bWVzaHRhc3RpYy9nby9nZW5lcmF0ZWSqAhRNZXNodGFzdGljLlByb3RvYnVm",
            "c7oCAGIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Meshtastic.Protobufs.HardwareMessage), global::Meshtastic.Protobufs.HardwareMessage.Parser, new[]{ "Type", "GpioMask", "GpioValue" }, null, new[]{ typeof(global::Meshtastic.Protobufs.HardwareMessage.Types.Type) }, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  ///
  /// An example app to show off the module system. This message is used for
  /// REMOTE_HARDWARE_APP PortNums.
  /// Also provides easy remote access to any GPIO.
  /// In the future other remote hardware operations can be added based on user interest
  /// (i.e. serial output, spi/i2c input/output).
  /// FIXME - currently this feature is turned on by default which is dangerous
  /// because no security yet (beyond the channel mechanism).
  /// It should be off by default and then protected based on some TBD mechanism
  /// (a special channel once multichannel support is included?)
  /// </summary>
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class HardwareMessage : pb::IMessage<HardwareMessage>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<HardwareMessage> _parser = new pb::MessageParser<HardwareMessage>(() => new HardwareMessage());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<HardwareMessage> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Meshtastic.Protobufs.RemoteHardwareReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public HardwareMessage() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public HardwareMessage(HardwareMessage other) : this() {
      type_ = other.type_;
      gpioMask_ = other.gpioMask_;
      gpioValue_ = other.gpioValue_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public HardwareMessage Clone() {
      return new HardwareMessage(this);
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private global::Meshtastic.Protobufs.HardwareMessage.Types.Type type_ = global::Meshtastic.Protobufs.HardwareMessage.Types.Type.Unset;
    /// <summary>
    ///
    /// What type of HardwareMessage is this?
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Meshtastic.Protobufs.HardwareMessage.Types.Type Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "gpio_mask" field.</summary>
    public const int GpioMaskFieldNumber = 2;
    private ulong gpioMask_;
    /// <summary>
    ///
    /// What gpios are we changing. Not used for all MessageTypes, see MessageType for details
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ulong GpioMask {
      get { return gpioMask_; }
      set {
        gpioMask_ = value;
      }
    }

    /// <summary>Field number for the "gpio_value" field.</summary>
    public const int GpioValueFieldNumber = 3;
    private ulong gpioValue_;
    /// <summary>
    ///
    /// For gpios that were listed in gpio_mask as valid, what are the signal levels for those gpios.
    /// Not used for all MessageTypes, see MessageType for details
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ulong GpioValue {
      get { return gpioValue_; }
      set {
        gpioValue_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as HardwareMessage);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(HardwareMessage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Type != other.Type) return false;
      if (GpioMask != other.GpioMask) return false;
      if (GpioValue != other.GpioValue) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (Type != global::Meshtastic.Protobufs.HardwareMessage.Types.Type.Unset) hash ^= Type.GetHashCode();
      if (GpioMask != 0UL) hash ^= GpioMask.GetHashCode();
      if (GpioValue != 0UL) hash ^= GpioValue.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Type != global::Meshtastic.Protobufs.HardwareMessage.Types.Type.Unset) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Type);
      }
      if (GpioMask != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(GpioMask);
      }
      if (GpioValue != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(GpioValue);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Type != global::Meshtastic.Protobufs.HardwareMessage.Types.Type.Unset) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Type);
      }
      if (GpioMask != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(GpioMask);
      }
      if (GpioValue != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(GpioValue);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (Type != global::Meshtastic.Protobufs.HardwareMessage.Types.Type.Unset) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (GpioMask != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(GpioMask);
      }
      if (GpioValue != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(GpioValue);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(HardwareMessage other) {
      if (other == null) {
        return;
      }
      if (other.Type != global::Meshtastic.Protobufs.HardwareMessage.Types.Type.Unset) {
        Type = other.Type;
      }
      if (other.GpioMask != 0UL) {
        GpioMask = other.GpioMask;
      }
      if (other.GpioValue != 0UL) {
        GpioValue = other.GpioValue;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Type = (global::Meshtastic.Protobufs.HardwareMessage.Types.Type) input.ReadEnum();
            break;
          }
          case 16: {
            GpioMask = input.ReadUInt64();
            break;
          }
          case 24: {
            GpioValue = input.ReadUInt64();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Type = (global::Meshtastic.Protobufs.HardwareMessage.Types.Type) input.ReadEnum();
            break;
          }
          case 16: {
            GpioMask = input.ReadUInt64();
            break;
          }
          case 24: {
            GpioValue = input.ReadUInt64();
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the HardwareMessage message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static partial class Types {
      /// <summary>
      ///
      /// TODO: REPLACE
      /// </summary>
      public enum Type {
        /// <summary>
        ///
        /// Unset/unused
        /// </summary>
        [pbr::OriginalName("UNSET")] Unset = 0,
        /// <summary>
        ///
        /// Set gpio gpios based on gpio_mask/gpio_value
        /// </summary>
        [pbr::OriginalName("WRITE_GPIOS")] WriteGpios = 1,
        /// <summary>
        ///
        /// We are now interested in watching the gpio_mask gpios.
        /// If the selected gpios change, please broadcast GPIOS_CHANGED.
        /// Will implicitly change the gpios requested to be INPUT gpios.
        /// </summary>
        [pbr::OriginalName("WATCH_GPIOS")] WatchGpios = 2,
        /// <summary>
        ///
        /// The gpios listed in gpio_mask have changed, the new values are listed in gpio_value
        /// </summary>
        [pbr::OriginalName("GPIOS_CHANGED")] GpiosChanged = 3,
        /// <summary>
        ///
        /// Read the gpios specified in gpio_mask, send back a READ_GPIOS_REPLY reply with gpio_value populated
        /// </summary>
        [pbr::OriginalName("READ_GPIOS")] ReadGpios = 4,
        /// <summary>
        ///
        /// A reply to READ_GPIOS. gpio_mask and gpio_value will be populated
        /// </summary>
        [pbr::OriginalName("READ_GPIOS_REPLY")] ReadGpiosReply = 5,
      }

    }
    #endregion

  }

  #endregion

}

#endregion Designer generated code
